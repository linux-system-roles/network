# SPDX-License-Identifier: BSD-3-Clause
---
- name: Play for testing ethtool features settings
  hosts: all
  vars:
    interface: testnic1
    type: veth
  tasks:
    - name: Show playbook name
      debug:
        msg: "this is: playbooks/tests_ethtool_features.yml"
      tags:
        - always

    - name: Include network role vars used by tests
      include_role:
        name: linux-system-roles.network
        tasks_from: set_facts.yml
        public: true

    - name: Run tests
      block:
        - name: Test creating profile without changing ethtool features
          when:
            - __network_is_booted
            - not __bootc_validation | d(false)
          include_tasks: tasks/run_test.yml
          vars:
            lsr_description: Test creating profile without changing ethtool features
            lsr_setup:
              - tasks/show_interfaces.yml
              - what: tasks/manage_test_interface.yml
                state: present
              - tasks/assert_device_present.yml
              - what: tasks/assert_command_output.yml
                lsr_packages: [ethtool]
                lsr_command: ethtool --show-features {{ interface | quote }}
            lsr_test:
              - network_connections:
                  - name: "{{ interface }}"
                    state: up
                    type: ethernet
                    ip:
                      dhcp4: "no"
                      auto6: "no"
            lsr_assert:  # NOTE: Cleanup is done in always at very end of file
              - what: tasks/assert_command_output.yml
                lsr_packages: [ethtool]
                lsr_command: ethtool --show-features {{ interface | quote }}
                lsr_stdout: "{{ __previous_command_output.stdout }}"
            lsr_cleanup: []

        - name: Set original ethtool features
          when:
            - __network_is_booted
            - not __bootc_validation | d(false)
          set_fact:
            original_ethtool_features: "{{ __previous_command_output }}"

        - name: "TEST: I can disable gro and tx-tcp-segmentation and enable gso."
          include_tasks: tasks/run_test.yml
          vars:
            lsr_description: Test creating profile without changing ethtool features
            lsr_setup:
              - tasks/show_interfaces.yml
              - what: tasks/manage_test_interface.yml
                state: present
              - tasks/assert_device_present.yml
              - what: tasks/assert_command_output.yml
                condition: "{{ __network_is_booted }}"
                lsr_packages: [ethtool]
                lsr_command: ethtool --show-features {{ interface | quote }}
            lsr_test:
              - network_connections:
                  - name: "{{ interface }}"
                    state: up
                    type: ethernet
                    ip:
                      dhcp4: "no"
                      auto6: "no"
                    ethtool:
                      features:
                        gro: "no"
                        gso: "yes"
                        tx-tcp-segmentation: "no"
            lsr_assert:
              - what: tasks/assert_connection_settings.yml
                condition: "{{ network_provider == 'nm' }}"
                lsr_connection_name: "{{ interface }}"
                lsr_connection_settings:
                  - section: ethtool
                    option: feature-gro
                    value: "false"
                    nmvalue: "off"
                  - section: ethtool
                    option: feature-gso
                    value: "true"
                    nmvalue: "on"
                  - section: ethtool
                    option: feature-tx-tcp-segmentation
                    value: "false"
                    nmvalue: "off"
              - what: tasks/assert_command_output.yml
                condition: "{{ __network_is_booted }}"
                lsr_packages: [ethtool]
                lsr_command: ethtool --show-features {{ interface | quote }}
                lsr_stdout_lines:
                  - "generic-receive-offload: off"
                  - "generic-segmentation-offload: on"
                  - "\ttx-tcp-segmentation: off"  # noqa no-tabs
            lsr_cleanup: []

        - name: >-
            TEST: I can enable tx_tcp_segmentation (using underscores).
          when:
            - __network_is_booted
            - not __bootc_validation | d(false)
          include_tasks: tasks/run_test.yml
          vars:
            lsr_description: Test enabling tx_tcp_segmentation (using underscores)
            lsr_setup: []
            lsr_test:
              - network_connections:
                  - name: "{{ interface }}"
                    state: up
                    type: ethernet
                    ip:
                      dhcp4: "no"
                      auto6: "no"
                    ethtool:
                      features:
                        tx_tcp_segmentation: "yes"
            lsr_assert:
              - what: tasks/assert_command_output.yml
                lsr_packages: [ethtool]
                lsr_command: ethtool --show-features {{ interface | quote }}
                lsr_stdout_lines:
                  - "\ttx-tcp-segmentation: on"  # noqa no-tabs
            lsr_cleanup: []

        - name: I cannot change tx_tcp_segmentation and tx-tcp-segmentation at
                the same time.
          when:
            - __network_is_booted
            - not __bootc_validation | d(false)
          block:
            - name: >-
                TEST: Change feature with both underscores and dashes.
              include_tasks: tasks/run_test.yml
              vars:
                lsr_description: Test changing feature with both underscores and dashes
                lsr_setup: []
                lsr_test:
                  - network_connections:
                      - name: "{{ interface }}"
                        state: up
                        type: ethernet
                        ip:
                          dhcp4: "no"
                          auto6: "no"
                        ethtool:
                          features:
                            tx_tcp_segmentation: "no"
                            tx-tcp-segmentation: "no"
                lsr_assert: []
                lsr_cleanup: []
          rescue:
            - name: Show network_connections result
              debug:
                var: __network_connections_result
            - name: Assert the duplicate key "tx_tcp_segmentation"
                configuration error happened
              assert:
                that: __test_str in __network_connections_result.msg
              vars:
                __test_str: >-
                  fatal error: configuration error:
                  connections[0].ethtool.features: duplicate key
                  'tx_tcp_segmentation'
          always:
            - name: Check failure
              debug:
                var: __network_connections_result
            - name: Assert that the result is failure
              assert:
                that: __network_connections_result.failed

        - name: "TEST: I can reset features to their original value."
          when:
            - __network_is_booted
            - not __bootc_validation | d(false)
          include_tasks: tasks/run_test.yml
          vars:
            lsr_description: Test resetting features to their original value
            lsr_setup: []
            lsr_test:
              - network_connections:
                  - name: "{{ interface }}"
                    state: up
                    type: ethernet
                    ip:
                      dhcp4: "no"
                      auto6: "no"
            lsr_assert:
              - what: tasks/assert_command_output.yml
                lsr_packages: [ethtool]
                lsr_command: ethtool --show-features {{ interface | quote }}
                lsr_stdout: "{{ original_ethtool_features.stdout }}"
            lsr_cleanup: []
      always:
        - name: Clean up the test device and the connection profile
          when: ansible_connection != "buildah"
          tags:
            - "tests::cleanup"
          block:
            - name: Import network role
              import_role:
                name: linux-system-roles.network
              vars:
                network_connections:
                  - name: "{{ interface }}"
                    persistent_state: absent
                    state: down
              failed_when: false
            - name: Include the task 'manage_test_interface.yml'
              include_tasks: tasks/manage_test_interface.yml
              vars:
                state: absent
            - name: Verify network state restored to default
              include_tasks: tasks/check_network_dns.yml

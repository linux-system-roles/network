# SPDX-License-Identifier: BSD-3-Clause
---
- name: Test output device of routes
  hosts: all
  vars:
    type: veth
    interface0: ethtest0
    interface1: ethtest1

  tasks:
    - name: Test the route or the warning log when configuring the route with
        or without the interface name
      block:
        - name: Test the route or the warning log when configuring the route with
            or without the interface name
          include_tasks: tasks/run_test.yml
          vars:
            lsr_description: Test the route or the warning log when configuring the route with
              or without the interface name
            lsr_setup:
              - tasks/show_interfaces.yml
              - what: tasks/manage_test_interface.yml
                state: present
                lsr_interface: "{{ interface0 }}"
              - what: tasks/assert_device_present.yml
                lsr_interface: "{{ interface0 }}"
              - what: tasks/manage_test_interface.yml
                state: present
                lsr_interface: "{{ interface1 }}"
              - what: tasks/assert_device_present.yml
                lsr_interface: "{{ interface1 }}"
            lsr_test:
              - network_connections:
                  - name: "{{ interface0 }}"
                    interface_name: "{{ interface0 }}"
                    state: up
                    type: ethernet
                    # Set autoconnect to true for buildah connection, otherwise,
                    # the test will need to start the connection manually
                    autoconnect: "{{ ansible_connection | d('') == 'buildah'}}"
                    ip:
                      address:
                        - 198.51.100.3/24
                        - 2001:db8::2/32
                      route:
                        - network: 198.51.10.64
                          prefix: 26
                          gateway: 198.51.100.6
                          metric: 4
                        - network: 2001:db6::4
                          prefix: 128
                          gateway: 2001:db8::1
                          metric: 2
                  - name: "{{ interface1 }}"
                    interface_name: "{{ interface1 }}"
                    state: up
                    type: ethernet
                    # Set autoconnect to true for buildah connection, otherwise,
                    # the test will need to start the connection manually
                    autoconnect: "{{ ansible_connection | d('') == 'buildah'}}"
                    ip:
                      address:
                        - 198.51.100.6/24
                        - 2001:db8::4/32
                      route:
                        - network: 198.51.12.128
                          prefix: 26
                          gateway: 198.51.100.1
                          metric: 2
            lsr_assert:
              - what: tasks/assert_connection_settings.yml
                condition: "{{ network_provider == 'nm' }}"
                lsr_connection_name: "{{ interface0 }}"
                lsr_connection_settings:
                  - section: ipv4
                    option: route1
                    value: 198.51.10.64/26,198.51.100.6,4
                    nmvalue: false
                  - section: ipv4
                    option: routes
                    nmvalue: 198.51.10.64/26 198.51.100.6 4
                  - section: ipv6
                    option: route1
                    value: 2001:db6::4/128,2001:db8::1,2
                    nmvalue: false
                  - section: ipv6
                    option: routes
                    nmvalue: 2001:db6::4/128 2001:db8::1 2
              - what: tasks/assert_connection_settings.yml
                condition: "{{ network_provider == 'nm' }}"
                lsr_connection_name: "{{ interface1 }}"
                lsr_connection_settings:
                  - section: ipv4
                    option: route1
                    value: 198.51.12.128/26,198.51.100.1,2
                    nmvalue: false
                  - section: ipv4
                    option: routes
                    nmvalue: 198.51.12.128/26 198.51.100.1 2
              - what: tasks/assert_command_output.yml
                condition: "{{ __network_is_booted }}"
                lsr_command: ip -4 route
                lsr_stdout_regex_list:
                  - "198.51.10.64/26 via 198.51.100.6 dev ethtest0\\s+(proto static )?metric 4"
                  - "198.51.12.128/26 via 198.51.100.1 dev ethtest1\\s+(proto static )?metric 2"
              - what: tasks/assert_command_output.yml
                condition: "{{ __network_is_booted }}"
                lsr_command: ip -6 route
                lsr_stdout_regex_list:
                  - "2001:db6::4 via 2001:db8::1 dev ethtest0\\s+(proto static )?metric 2"
            lsr_cleanup: []

        - name: Get the interface1 MAC address
          command: cat /sys/class/net/{{ interface1 }}/address
          register: interface1_mac
          changed_when: false
          when: __network_is_booted and not __bootc_validation | d(false)

        - name: Configure the IP addresses and the route with only the MAC
            address specified
          include_role:
            name: linux-system-roles.network
          when: __network_is_booted and not __bootc_validation | d(false)
          vars:
            network_connections:
              - name: "{{ interface1 }}"
                mac: "{{ interface1_mac.stdout }}"
                type: ethernet
                autoconnect: false
                ip:
                  address:
                    - 198.51.100.4/24
                    - 2001:db8::6/32
                  route:
                    - network: 198.58.10.64
                      prefix: 26
                      gateway: 198.51.100.102
                      metric: 4

        - name: Assert that the warning about specifying the route without
            the output device is logged for initscripts provider
          assert:
            that:
              - __network_connections_result.stderr is search("\[003\]
                <warn>  .0, state.None persistent_state.present,
                '{{ interface1 }}'. The connection {{ interface1 }} does not
                specify an interface name. Therefore, the route to
                198.58.10.64/26 will be configured without the output device
                and the kernel will choose it automatically which might result
                in an unwanted device being used. To avoid this, specify
                `interface_name` in the connection appropriately.")
            msg: The warning about specifying the route without the output
              device is not logged for initscripts provider
          when:
            - network_provider == "initscripts"
            - __network_is_booted
            - not __bootc_validation | d(false)

        - name: Assert that no warning is logged for nm provider
          assert:
            that:
              - __network_connections_result.stderr is not search("<warn>")
            msg: The warning is logged for nm provider
          when:
            - network_provider == "initscripts"
            - __network_is_booted
            - not __bootc_validation | d(false)
      always:
        - name: Remove test configuration
          tags:
            - "tests::cleanup"
          when: ansible_connection != "buildah"
          block:
            - name: Bring down test devices and profiles
              include_role:
                name: linux-system-roles.network
              vars:
                network_connections:
                  - name: "{{ interface0 }}"
                    persistent_state: absent
                    state: down
                  - name: "{{ interface1 }}"
                    persistent_state: absent
                    state: down
            - name: Delete interface1
              include_tasks: tasks/delete_interface.yml
              vars:
                lsr_interface: "{{ interface1 }}"
            - name: Assert interface1 is absent
              include_tasks: tasks/assert_device_absent.yml
              vars:
                lsr_interface: "{{ interface1 }}"
            - name: Delete interface0
              include_tasks: tasks/delete_interface.yml
              vars:
                lsr_interface: "{{ interface0 }}"
            - name: Assert interface0 is absent
              include_tasks: tasks/assert_device_absent.yml
              vars:
                lsr_interface: "{{ interface0 }}"
            - name: Assert interface0 profile and interface1 profile are absent
              include_tasks: tasks/assert_profile_absent.yml
              vars:
                profile: "{{ item }}"
              loop:
                - "{{ interface0 }}"
                - "{{ interface1 }}"
            - name: Verify network state restored to default
              include_tasks: tasks/check_network_dns.yml
...

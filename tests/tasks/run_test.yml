# SPDX-License-Identifier: BSD-3-Clause
---
- name: Run test
  block:
    - name: "TEST: {{ lsr_description }}"
      debug:
        msg: "########## {{ lsr_description }} ##########"

    - name: Include network role vars used by tests
      include_role:
        name: linux-system-roles.network
        tasks_from: set_facts.yml
        public: true
      when: __network_is_booted is not defined

    - name: Show item
      debug:
        msg: item {{ item | default("UNDEFINED") | to_nice_json }}
      loop:
        - lsr_description
        - lsr_setup
        - lsr_test
        - lsr_assert
        - lsr_assert_when
        - lsr_fail_debug
        - lsr_cleanup

    - name: Include the task 'show_interfaces.yml'
      include_tasks: tasks/show_interfaces.yml

    - name: Setup
      include_tasks: tasks/handle_setup_task.yml
      loop: "{{ lsr_setup }}"
      loop_control:
        loop_var: lsr_setup_item
      tags:
        - "tests::setup"

    - name: Test
      include_tasks: tasks/handle_test_task.yml
      loop: "{{ lsr_test }}"
      loop_control:
        loop_var: lsr_test_item
      when: not __bootc_validation | default(false)
      tags:
        - "tests::test"

    # When validation is enabled, we need to load the role variables
    # and set the result because we aren't running the role to set
    # the network connections - that was already done at build time
    - name: Handle case where validation is enabled
      when: __bootc_validation | default(false)
      block:
        - name: Load role variables
          include_role:
            name: linux-system-roles.network
            tasks_from: set_facts.yml
            public: true

        - name: Set result
          set_fact:
            __network_connections_result:
              failed: false
              stderr: ""
              stdout: ""
              changed: true
              stdout_lines: []
              stderr_lines: []

    # You can use either lsr_assert or lsr_assert_when - but not both
    - name: Asserts
      include_tasks: tasks/handle_assert_task.yml
      loop: "{{ (lsr_assert | default([])) + (lsr_assert_when | default([])) }}"
      loop_control:
        loop_var: lsr_assert_item

    - name: "Success in test '{{ lsr_description }}'"
      debug:
        msg: "+++++ Success in test '{{ lsr_description }}' +++++"

  rescue:
    - name: "Failure in test '{{ lsr_description }}'"
      debug:
        msg: "!!!!! Failure in test '{{ lsr_description }}' !!!!!"

    - name: Show item that failed
      debug:
        var: "{{ item | d('UNDEFINED') }}"
      loop: "{{ lsr_fail_debug | default([]) }}"

    - name: Issue failed message
      fail:
        msg: "!!!!! Failure in test '{{ lsr_description }}' !!!!!"

  always:
    - name: Create QEMU deployment during bootc end-to-end test
      delegate_to: localhost
      command: "{{ lsr_scriptdir | quote }}/bootc-buildah-qcow.sh {{ ansible_host | quote }}"
      changed_when: true
      when: ansible_connection == "buildah"

    # skip cleanup if building with buildah
    - name: Cleanup
      include_tasks: tasks/handle_cleanup_task.yml
      loop: "{{ lsr_cleanup }}"
      loop_control:
        loop_var: lsr_cleanup_item
      when: ansible_connection != "buildah"
      tags:
        - "tests::cleanup"
...
